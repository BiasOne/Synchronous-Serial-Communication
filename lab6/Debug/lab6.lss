
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000524  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00802000  00802000  00000598  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e60  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f18  00000000  00000000  00005530  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a67  00000000  00000000  00009448  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00009eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000032c2  00000000  00000000  0000a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b5  00000000  00000000  0000d382  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000d737  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_2>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a1 30       	cpi	r26, 0x01	; 1
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 18 01 	call	0x230	; 0x230 <main>
 228:	0c 94 90 02 	jmp	0x520	; 0x520 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <main>:
volatile uint8_t accel_flag;



int main(void)
{	
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	00 d0       	rcall	.+0      	; 0x236 <main+0x6>
 236:	00 d0       	rcall	.+0      	; 0x238 <main+0x8>
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
	
	PORTC.DIRCLR = 0b01000000;
 23c:	80 e4       	ldi	r24, 0x40	; 64
 23e:	96 e0       	ldi	r25, 0x06	; 6
 240:	20 e4       	ldi	r18, 0x40	; 64
 242:	fc 01       	movw	r30, r24
 244:	22 83       	std	Z+2, r18	; 0x02
	PORTC.INTCTRL = 0x01;
 246:	80 e4       	ldi	r24, 0x40	; 64
 248:	96 e0       	ldi	r25, 0x06	; 6
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	fc 01       	movw	r30, r24
 24e:	21 87       	std	Z+9, r18	; 0x09
	PORTC.INT0MASK = 0b01000000;
 250:	80 e4       	ldi	r24, 0x40	; 64
 252:	96 e0       	ldi	r25, 0x06	; 6
 254:	20 e4       	ldi	r18, 0x40	; 64
 256:	fc 01       	movw	r30, r24
 258:	22 87       	std	Z+10, r18	; 0x0a
	PORTC.PIN6CTRL= 0b00000001;
 25a:	80 e4       	ldi	r24, 0x40	; 64
 25c:	96 e0       	ldi	r25, 0x06	; 6
 25e:	21 e0       	ldi	r18, 0x01	; 1
 260:	fc 01       	movw	r30, r24
 262:	26 8b       	std	Z+22, r18	; 0x16
	
	PMIC_CTRL = PMIC_LOLVLEN_bm;
 264:	82 ea       	ldi	r24, 0xA2	; 162
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	fc 01       	movw	r30, r24
 26c:	20 83       	st	Z, r18
	sei();
 26e:	78 94       	sei
	
	accel_flag=0;
 270:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
	lsm6ds3_init();
 274:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lsm6ds3_init>
	usartd0_init();
 278:	0e 94 4c 02 	call	0x498	; 0x498 <usartd0_init>
	
	while(1)
	{
		if(accel_flag == 1)//interupt broken
 27c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	e1 f7       	brne	.-8      	; 0x27c <main+0x4c>
		{	
		accel_flag=0;
 284:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
		volatile uint8_t accel_XL=lsm6ds3_read(OUTX_L_XL);
 288:	88 e2       	ldi	r24, 0x28	; 40
 28a:	0e 94 ca 01 	call	0x394	; 0x394 <lsm6ds3_read>
 28e:	89 83       	std	Y+1, r24	; 0x01
		volatile uint8_t accel_XH=lsm6ds3_read(OUTX_H_XL);
 290:	89 e2       	ldi	r24, 0x29	; 41
 292:	0e 94 ca 01 	call	0x394	; 0x394 <lsm6ds3_read>
 296:	8a 83       	std	Y+2, r24	; 0x02
		
		volatile uint8_t accel_YL=lsm6ds3_read(OUTY_L_XL);
 298:	8a e2       	ldi	r24, 0x2A	; 42
 29a:	0e 94 ca 01 	call	0x394	; 0x394 <lsm6ds3_read>
 29e:	8b 83       	std	Y+3, r24	; 0x03
		volatile uint8_t accel_YH=lsm6ds3_read(OUTY_H_XL);
 2a0:	8b e2       	ldi	r24, 0x2B	; 43
 2a2:	0e 94 ca 01 	call	0x394	; 0x394 <lsm6ds3_read>
 2a6:	8c 83       	std	Y+4, r24	; 0x04
		
		volatile uint8_t accel_ZL=lsm6ds3_read(OUTZ_L_XL);
 2a8:	8c e2       	ldi	r24, 0x2C	; 44
 2aa:	0e 94 ca 01 	call	0x394	; 0x394 <lsm6ds3_read>
 2ae:	8d 83       	std	Y+5, r24	; 0x05
		volatile uint8_t accel_ZH=lsm6ds3_read(OUTZ_H_XL);
 2b0:	8d e2       	ldi	r24, 0x2D	; 45
 2b2:	0e 94 ca 01 	call	0x394	; 0x394 <lsm6ds3_read>
 2b6:	8e 83       	std	Y+6, r24	; 0x06
		
		usartd0_out_char(accel_XL);
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	0e 94 75 02 	call	0x4ea	; 0x4ea <usartd0_out_char>
		usartd0_out_char(accel_XH);
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	0e 94 75 02 	call	0x4ea	; 0x4ea <usartd0_out_char>
		
		usartd0_out_char(accel_YL);
 2c4:	8b 81       	ldd	r24, Y+3	; 0x03
 2c6:	0e 94 75 02 	call	0x4ea	; 0x4ea <usartd0_out_char>
		usartd0_out_char(accel_YH);
 2ca:	8c 81       	ldd	r24, Y+4	; 0x04
 2cc:	0e 94 75 02 	call	0x4ea	; 0x4ea <usartd0_out_char>
		
		usartd0_out_char(accel_ZL);
 2d0:	8d 81       	ldd	r24, Y+5	; 0x05
 2d2:	0e 94 75 02 	call	0x4ea	; 0x4ea <usartd0_out_char>
		usartd0_out_char(accel_ZH);
 2d6:	8e 81       	ldd	r24, Y+6	; 0x06
 2d8:	0e 94 75 02 	call	0x4ea	; 0x4ea <usartd0_out_char>
		
		}		
	}	
 2dc:	cf cf       	rjmp	.-98     	; 0x27c <main+0x4c>

000002de <__vector_2>:
}

ISR(PORTC_INT0_vect)
{
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 2ee:	0f 92       	push	r0
 2f0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 2f4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 2f8:	0f 92       	push	r0
 2fa:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 2fe:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 302:	0f 92       	push	r0
 304:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 308:	2f 93       	push	r18
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
	PORTC_INTFLAGS =0b00000001;
 31a:	8c e4       	ldi	r24, 0x4C	; 76
 31c:	96 e0       	ldi	r25, 0x06	; 6
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	fc 01       	movw	r30, r24
 322:	20 83       	st	Z, r18
	accel_flag=1;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
 32a:	00 00       	nop
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	ff 91       	pop	r31
 332:	ef 91       	pop	r30
 334:	9f 91       	pop	r25
 336:	8f 91       	pop	r24
 338:	2f 91       	pop	r18
 33a:	0f 90       	pop	r0
 33c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 340:	0f 90       	pop	r0
 342:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 346:	0f 90       	pop	r0
 348:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 34c:	0f 90       	pop	r0
 34e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <lsm6ds3_write>:
/*****************************END OF DEPENDENCIES******************************/


/*****************************FUNCTION DEFINITIONS*****************************/
void lsm6ds3_write(uint8_t reg_addr, uint8_t data)
{
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	1f 92       	push	r1
 35e:	1f 92       	push	r1
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	89 83       	std	Y+1, r24	; 0x01
 366:	6a 83       	std	Y+2, r22	; 0x02
	PORTF.OUTCLR = CS_bm;
 368:	80 ea       	ldi	r24, 0xA0	; 160
 36a:	96 e0       	ldi	r25, 0x06	; 6
 36c:	20 e1       	ldi	r18, 0x10	; 16
 36e:	fc 01       	movw	r30, r24
 370:	26 83       	std	Z+6, r18	; 0x06
	spi_write(reg_addr | LSM6DS3_SPI_WRITE_STROBE_bm);
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	0e 94 1e 02 	call	0x43c	; 0x43c <spi_write>
	spi_write(data);
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	0e 94 1e 02 	call	0x43c	; 0x43c <spi_write>
	PORTF.OUTSET = CS_bm;		
 37e:	80 ea       	ldi	r24, 0xA0	; 160
 380:	96 e0       	ldi	r25, 0x06	; 6
 382:	20 e1       	ldi	r18, 0x10	; 16
 384:	fc 01       	movw	r30, r24
 386:	25 83       	std	Z+5, r18	; 0x05
}
 388:	00 00       	nop
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <lsm6ds3_read>:
	
uint8_t lsm6ds3_read(uint8_t reg_addr)
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	1f 92       	push	r1
 39a:	1f 92       	push	r1
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	8a 83       	std	Y+2, r24	; 0x02
	PORTF.OUTCLR=CS_bm;
 3a2:	80 ea       	ldi	r24, 0xA0	; 160
 3a4:	96 e0       	ldi	r25, 0x06	; 6
 3a6:	20 e1       	ldi	r18, 0x10	; 16
 3a8:	fc 01       	movw	r30, r24
 3aa:	26 83       	std	Z+6, r18	; 0x06
	spi_write(reg_addr | LSM6DS3_SPI_READ_STROBE_bm);
 3ac:	8a 81       	ldd	r24, Y+2	; 0x02
 3ae:	80 68       	ori	r24, 0x80	; 128
 3b0:	0e 94 1e 02 	call	0x43c	; 0x43c <spi_write>
	uint8_t data = spi_read();
 3b4:	0e 94 35 02 	call	0x46a	; 0x46a <spi_read>
 3b8:	89 83       	std	Y+1, r24	; 0x01
	PORTF.OUTSET = CS_bm;
 3ba:	80 ea       	ldi	r24, 0xA0	; 160
 3bc:	96 e0       	ldi	r25, 0x06	; 6
 3be:	20 e1       	ldi	r18, 0x10	; 16
 3c0:	fc 01       	movw	r30, r24
 3c2:	25 83       	std	Z+5, r18	; 0x05
	return data;//dont think i need this since spi_read returns shit
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
}
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <lsm6ds3_init>:

void lsm6ds3_init(void)
{
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
	spi_init();	
 3d8:	0e 94 02 02 	call	0x404	; 0x404 <spi_init>
	lsm6ds3_write(CTRL3_C, 0b00000001);
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	82 e1       	ldi	r24, 0x12	; 18
 3e0:	0e 94 ac 01 	call	0x358	; 0x358 <lsm6ds3_write>
	lsm6ds3_write(CTRL1_XL, 0b01010000);
 3e4:	60 e5       	ldi	r22, 0x50	; 80
 3e6:	80 e1       	ldi	r24, 0x10	; 16
 3e8:	0e 94 ac 01 	call	0x358	; 0x358 <lsm6ds3_write>
	lsm6ds3_write(CTRL9_XL, 0b00111000);
 3ec:	68 e3       	ldi	r22, 0x38	; 56
 3ee:	88 e1       	ldi	r24, 0x18	; 24
 3f0:	0e 94 ac 01 	call	0x358	; 0x358 <lsm6ds3_write>
	lsm6ds3_write(INT1_CTRL, 0b00000001);
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	8d e0       	ldi	r24, 0x0D	; 13
 3f8:	0e 94 ac 01 	call	0x358	; 0x358 <lsm6ds3_write>
	
}
 3fc:	00 00       	nop
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <spi_init>:

/*****************************FUNCTION DEFINITIONS*****************************/


void spi_init(void)
{
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
  /* Configure pin direction of relevant SPI signals. */
  PORTF.OUTSET = CS_bm | MOSI_bm | SCK_bm | MISO_bm;
 40c:	80 ea       	ldi	r24, 0xA0	; 160
 40e:	96 e0       	ldi	r25, 0x06	; 6
 410:	20 ef       	ldi	r18, 0xF0	; 240
 412:	fc 01       	movw	r30, r24
 414:	25 83       	std	Z+5, r18	; 0x05
  PORTF.DIRSET = CS_bm | MOSI_bm | SCK_bm;
 416:	80 ea       	ldi	r24, 0xA0	; 160
 418:	96 e0       	ldi	r25, 0x06	; 6
 41a:	20 eb       	ldi	r18, 0xB0	; 176
 41c:	fc 01       	movw	r30, r24
 41e:	21 83       	std	Z+1, r18	; 0x01
  PORTF.DIRCLR = MISO_bm;
 420:	80 ea       	ldi	r24, 0xA0	; 160
 422:	96 e0       	ldi	r25, 0x06	; 6
 424:	20 e4       	ldi	r18, 0x40	; 64
 426:	fc 01       	movw	r30, r24
 428:	22 83       	std	Z+2, r18	; 0x02
   
	
	/* Set the other relevant SPI configurations. */
	SPIF.CTRL	=	SPI_PRESCALER1_bm | SPI_MASTER_bm | SPI_MODE_3_gc | SPI_ENABLE_bm;
 42a:	80 ec       	ldi	r24, 0xC0	; 192
 42c:	9b e0       	ldi	r25, 0x0B	; 11
 42e:	2e e5       	ldi	r18, 0x5E	; 94
 430:	fc 01       	movw	r30, r24
 432:	20 83       	st	Z, r18
}
 434:	00 00       	nop
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <spi_write>:

void spi_write(uint8_t data)
{
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	1f 92       	push	r1
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
 446:	89 83       	std	Y+1, r24	; 0x01
	/* Write to the relevant DATA register. */
	SPIF.DATA = data;
 448:	80 ec       	ldi	r24, 0xC0	; 192
 44a:	9b e0       	ldi	r25, 0x0B	; 11
 44c:	29 81       	ldd	r18, Y+1	; 0x01
 44e:	fc 01       	movw	r30, r24
 450:	23 83       	std	Z+3, r18	; 0x03

	/* Wait for relevant transfer to complete. */
	while((SPIF.STATUS & SPI_IF_bm) != SPI_IF_bm);
 452:	00 00       	nop
 454:	80 ec       	ldi	r24, 0xC0	; 192
 456:	9b e0       	ldi	r25, 0x0B	; 11
 458:	fc 01       	movw	r30, r24
 45a:	82 81       	ldd	r24, Z+2	; 0x02
 45c:	88 23       	and	r24, r24
 45e:	d4 f7       	brge	.-12     	; 0x454 <spi_write+0x18>
}
 460:	00 00       	nop
 462:	0f 90       	pop	r0
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <spi_read>:

uint8_t spi_read(void)
{
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
  /* Write some arbitrary data to initiate a transfer. */
  SPIF.DATA = 0x37;
 472:	80 ec       	ldi	r24, 0xC0	; 192
 474:	9b e0       	ldi	r25, 0x0B	; 11
 476:	27 e3       	ldi	r18, 0x37	; 55
 478:	fc 01       	movw	r30, r24
 47a:	23 83       	std	Z+3, r18	; 0x03

  /* Wait for relevant transfer to be complete. */
  while((SPIF.STATUS & SPI_IF_bm) != SPI_IF_bm);
 47c:	00 00       	nop
 47e:	80 ec       	ldi	r24, 0xC0	; 192
 480:	9b e0       	ldi	r25, 0x0B	; 11
 482:	fc 01       	movw	r30, r24
 484:	82 81       	ldd	r24, Z+2	; 0x02
 486:	88 23       	and	r24, r24
 488:	d4 f7       	brge	.-12     	; 0x47e <spi_read+0x14>

	/* After the transmission, return the data that was received. */
	return SPIF.DATA;
 48a:	80 ec       	ldi	r24, 0xC0	; 192
 48c:	9b e0       	ldi	r25, 0x0B	; 11
 48e:	fc 01       	movw	r30, r24
 490:	83 81       	ldd	r24, Z+3	; 0x03
}
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	08 95       	ret

00000498 <usartd0_init>:
*          transmitter.
* Input(s): N/A
* Output: N/A
******************************************************************************/
void usartd0_init(void)
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
  /* configure relevant TxD and RxD pins */
	PORTD.OUTSET = PIN3_bm;
 4a0:	80 e6       	ldi	r24, 0x60	; 96
 4a2:	96 e0       	ldi	r25, 0x06	; 6
 4a4:	28 e0       	ldi	r18, 0x08	; 8
 4a6:	fc 01       	movw	r30, r24
 4a8:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 4aa:	80 e6       	ldi	r24, 0x60	; 96
 4ac:	96 e0       	ldi	r25, 0x06	; 6
 4ae:	28 e0       	ldi	r18, 0x08	; 8
 4b0:	fc 01       	movw	r30, r24
 4b2:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 4b4:	80 e6       	ldi	r24, 0x60	; 96
 4b6:	96 e0       	ldi	r25, 0x06	; 6
 4b8:	24 e0       	ldi	r18, 0x04	; 4
 4ba:	fc 01       	movw	r30, r24
 4bc:	22 83       	std	Z+2, r18	; 0x02

  /* configure baud rate */
	/* At 2 MHz SYSclk, 5 BSEL, -6 BSCALE corresponds to 115200 bps */
	USARTD0.BAUDCTRLA = (uint8_t)0;
 4be:	80 ea       	ldi	r24, 0xA0	; 160
 4c0:	99 e0       	ldi	r25, 0x09	; 9
 4c2:	fc 01       	movw	r30, r24
 4c4:	16 82       	std	Z+6, r1	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)( (0 << 4) | (0 >> 8) );
 4c6:	80 ea       	ldi	r24, 0xA0	; 160
 4c8:	99 e0       	ldi	r25, 0x09	; 9
 4ca:	fc 01       	movw	r30, r24
 4cc:	17 82       	std	Z+7, r1	; 0x07

  /* configure remainder of serial protocol */
  /* in this example, a protocol with 8 data bits, no parity, and
   * one stop bit is chosen. */
	USARTD0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc |
 4ce:	80 ea       	ldi	r24, 0xA0	; 160
 4d0:	99 e0       	ldi	r25, 0x09	; 9
 4d2:	23 e0       	ldi	r18, 0x03	; 3
 4d4:	fc 01       	movw	r30, r24
 4d6:	25 83       	std	Z+5, r18	; 0x05
					        USART_PMODE_DISABLED_gc		  |
					        USART_CHSIZE_8BIT_gc        &
                  ~USART_SBMODE_bm;

  /* enable receiver and/or transmitter systems */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 4d8:	80 ea       	ldi	r24, 0xA0	; 160
 4da:	99 e0       	ldi	r25, 0x09	; 9
 4dc:	28 e1       	ldi	r18, 0x18	; 24
 4de:	fc 01       	movw	r30, r24
 4e0:	24 83       	std	Z+4, r18	; 0x04

  /* enable interrupt (optional) */
	/* USARTD0.CTRLA = USART_RXCINTLVL_MED_gc; */
}
 4e2:	00 00       	nop
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <usartd0_out_char>:
* Purpose: To output a character from the transmitter within USARTD0.
* Input(s): c (char)
* Output: N/A
******************************************************************************/
void usartd0_out_char(char c)
{
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	1f 92       	push	r1
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
 4f4:	89 83       	std	Y+1, r24	; 0x01
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 4f6:	00 00       	nop
 4f8:	80 ea       	ldi	r24, 0xA0	; 160
 4fa:	99 e0       	ldi	r25, 0x09	; 9
 4fc:	fc 01       	movw	r30, r24
 4fe:	81 81       	ldd	r24, Z+1	; 0x01
 500:	88 2f       	mov	r24, r24
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	80 72       	andi	r24, 0x20	; 32
 506:	99 27       	eor	r25, r25
 508:	89 2b       	or	r24, r25
 50a:	b1 f3       	breq	.-20     	; 0x4f8 <usartd0_out_char+0xe>
	USARTD0.DATA = c;
 50c:	80 ea       	ldi	r24, 0xA0	; 160
 50e:	99 e0       	ldi	r25, 0x09	; 9
 510:	29 81       	ldd	r18, Y+1	; 0x01
 512:	fc 01       	movw	r30, r24
 514:	20 83       	st	Z, r18
}
 516:	00 00       	nop
 518:	0f 90       	pop	r0
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <_exit>:
 520:	f8 94       	cli

00000522 <__stop_program>:
 522:	ff cf       	rjmp	.-2      	; 0x522 <__stop_program>
